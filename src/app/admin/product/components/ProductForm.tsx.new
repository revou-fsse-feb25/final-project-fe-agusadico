'use client'

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import Image from 'next/image';

interface ProductFormProps {
  productId?: string;
  isNewProduct?: boolean;
}

const ProductForm: React.FC<ProductFormProps> = ({ productId, isNewProduct = false }) => {
  const router = useRouter();
  const [activeTab, setActiveTab] = useState('general');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [mainImagePreview, setMainImagePreview] = useState<string | null>(null);
  const [galleryImagePreviews, setGalleryImagePreviews] = useState<string[]>([]);
  const [submitSuccess, setSubmitSuccess] = useState(false);
  const [submitError, setSubmitError] = useState<string | null>(null);
  const [newTag, setNewTag] = useState('');
  const [newCategory, setNewCategory] = useState('');
  const [newFeature, setNewFeature] = useState('');
  const [calculatedDiscount, setCalculatedDiscount] = useState(0);

  const [formData, setFormData] = useState({
    name: '',
    slug: '',
    category: '',
    price: '',
    originalPrice: '',
    discount: 0,
    image: '',
    description: '',
    features: [] as string[],
    sku: '',
    inStock: true,
    tags: [] as string[],
    categories: [] as string[],
    galleryImages: [] as string[],
  });

  // Calculate discount when price or originalPrice changes
  useEffect(() => {
    if (formData.originalPrice && formData.price) {
      const original = parseFloat(formData.originalPrice);
      const current = parseFloat(formData.price);
      
      if (original > 0 && current > 0 && original > current) {
        const discountValue = Math.round(((original - current) / original) * 100);
        setCalculatedDiscount(discountValue);
        setFormData(prev => ({ ...prev, discount: discountValue }));
      } else {
        setCalculatedDiscount(0);
        setFormData(prev => ({ ...prev, discount: 0 }));
      }
    }
  }, [formData.price, formData.originalPrice]);

  // Auto-generate slug from name
  useEffect(() => {
    if (formData.name) {
      const slug = formData.name
        .toLowerCase()
        .replace(/[^\w\s-]/g, '')
        .replace(/[\s_-]+/g, '-')
        .replace(/^-+|-+$/g, '');
      
      setFormData(prev => ({ ...prev, slug }));
    }
  }, [formData.name]);

  // Fetch product data if editing an existing product
  useEffect(() => {
    if (productId && !isNewProduct) {
      setIsLoading(true);
      
      fetch(`/api/products/${productId}`)
        .then(response => {
          if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
          }
          return response.json();
        })
        .then(data => {
          setFormData({
            name: data.name || '',
            slug: data.slug || '',
            category: data.category || '',
            price: data.price?.toString() || '',
            originalPrice: data.originalPrice?.toString() || '',
            discount: data.discount || 0,
            image: data.image || '',
            description: data.description || '',
            features: data.features || [],
            sku: data.sku || '',
            inStock: data.inStock !== undefined ? data.inStock : true,
            tags: data.tags || [],
            categories: data.categories || [],
            galleryImages: data.galleryImages || [],
          });
          
          // Set image previews
          if (data.image) {
            setMainImagePreview(data.image);
          }
          
          if (data.galleryImages && data.galleryImages.length > 0) {
            setGalleryImagePreviews(data.galleryImages);
          }
          
          setIsLoading(false);
        })
        .catch(error => {
          console.error('Error fetching product data:', error);
          setSubmitError('Failed to load product data. Please try again.');
          setIsLoading(false);
        });
    }
  }, [productId, isNewProduct]);

  const validateForm = () => {
    if (!formData.name) {
      setSubmitError('Product name is required');
      return false;
    }
    
    if (!formData.price) {
      setSubmitError('Price is required');
      return false;
    }
    
    if (!formData.image) {
      setSubmitError('Main product image is required');
      return false;
    }
    
    if (!formData.description) {
      setSubmitError('Product description is required');
      return false;
    }
    
    return true;
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value, type } = e.target as HTMLInputElement;
    
    if (type === 'checkbox') {
      const checked = (e.target as HTMLInputElement).checked;
      setFormData(prev => ({ ...prev, [name]: checked }));
    } else {
      setFormData(prev => ({ ...prev, [name]: value }));
    }
  };

  const handleAddTag = () => {
    if (newTag && !formData.tags.includes(newTag)) {
      setFormData(prev => ({
        ...prev,
        tags: [...prev.tags, newTag]
      }));
      setNewTag('');
    }
  };

  const handleRemoveTag = (tag: string) => {
    setFormData(prev => ({
      ...prev,
      tags: prev.tags.filter(t => t !== tag)
    }));
  };

  const handleAddCategory = () => {
    if (newCategory && !formData.categories.includes(newCategory)) {
      setFormData(prev => ({
        ...prev,
        categories: [...prev.categories, newCategory]
      }));
      setNewCategory('');
    }
  };

  const handleRemoveCategory = (category: string) => {
    setFormData(prev => ({
      ...prev,
      categories: prev.categories.filter(c => c !== category)
    }));
  };

  const handleAddFeature = () => {
    if (newFeature && !formData.features.includes(newFeature)) {
      setFormData(prev => ({
        ...prev,
        features: [...prev.features, newFeature]
      }));
      setNewFeature('');
    }
  };

  const handleRemoveFeature = (feature: string) => {
    setFormData(prev => ({
      ...prev,
      features: prev.features.filter(f => f !== feature)
    }));
  };

  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
    
    if (value) {
      setMainImagePreview(value);
    } else {
      setMainImagePreview(null);
    }
  };

  const handleGalleryImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { value } = e.target;
    
    if (value && !formData.galleryImages.includes(value)) {
      const updatedGalleryImages = [...formData.galleryImages, value];
      setFormData(prev => ({
        ...prev,
        galleryImages: updatedGalleryImages
      }));
      
      setGalleryImagePreviews(prev => [...prev, value]);
    }
    
    // Clear the input
    e.target.value = '';
  };

  const handleRemoveGalleryImage = (index: number) => {
    const updatedGalleryImages = [...formData.galleryImages];
    updatedGalleryImages.splice(index, 1);
    
    setFormData(prev => ({
      ...prev,
      galleryImages: updatedGalleryImages
    }));
    
    const updatedPreviews = [...galleryImagePreviews];
    updatedPreviews.splice(index, 1);
    setGalleryImagePreviews(updatedPreviews);
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }
    
    setIsSubmitting(true);
    setSubmitError(null);
    
    // Prepare data for API
    const productData = {
      name: formData.name,
      slug: formData.slug,
      price: parseFloat(formData.price),
      originalPrice: formData.originalPrice ? parseFloat(formData.originalPrice) : undefined,
      discount: formData.discount,
      image: formData.image,
      description: formData.description,
      features: formData.features,
      sku: formData.sku,
      inStock: formData.inStock,
      tags: formData.tags,
      categories: formData.categories,
      galleryImages: formData.galleryImages,
    };
    
    // Get auth token
    const token = localStorage.getItem('token');
    
    if (!token) {
      setSubmitError('Authentication required. Please log in again.');
      setIsSubmitting(false);
      return;
    }
    
    // Determine if we're creating a new product or updating an existing one
    const method = isNewProduct ? 'POST' : 'PATCH';
    const url = isNewProduct ? '/api/products' : `/api/products/${productId}`;
    
    fetch(url, {
      method,
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify(productData)
    })
      .then(response => {
        if (response.status === 401) {
          throw new Error('Unauthorized. Please log in again.');
        }
        
        if (response.status === 403) {
          throw new Error('You do not have permission to perform this action.');
        }
        
        if (response.status === 404) {
          throw new Error('Product not found.');
        }
        
        if (response.status === 400) {
          return response.json().then(data => {
            throw new Error(data.message || 'Invalid product data. Please check your inputs.');
          });
        }
        
        if (!response.ok) {
          throw new Error(`Server error: ${response.status}`);
        }
        
        return response.json();
      })
      .then(data => {
        setSubmitSuccess(true);
        setIsSubmitting(false);
        
        // Redirect to product list after successful submission
        setTimeout(() => {
          router.push('/admin/product');
        }, 1500);
      })
      .catch(error => {
        console.error('Error submitting product:', error);
        setSubmitError(error.message || 'Failed to save product. Please try again.');
        setIsSubmitting(false);
      });
  };
  
  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
      </div>
    );
  }
  
  return (
    <div className="bg-white rounded-lg shadow-md p-6">
      <div className="border-b border-gray-200 mb-6">
        <div className="flex space-x-4">
          <button
            type="button"
            className={`px-4 py-2 font-medium ${activeTab === 'general' ? 'text-blue-600 border-b-2 border-blue-600' : 'text-gray-500 hover:text-gray-700'}`}
            onClick={() => setActiveTab('general')}
          >
            General
          </button>
          <button
            type="button"
            className={`px-4 py-2 font-medium ${activeTab === 'inventory' ? 'text-blue-600 border-b-2 border-blue-600' : 'text-gray-500 hover:text-gray-700'}`}
            onClick={() => setActiveTab('inventory')}
          >
            Inventory
          </button>
          <button
            type="button"
            className={`px-4 py-2 font-medium ${activeTab === 'images' ? 'text-blue-600 border-b-2 border-blue-600' : 'text-gray-500 hover:text-gray-700'}`}
            onClick={() => setActiveTab('images')}
          >
            Images
          </button>
        </div>
      </div>
      
      <form onSubmit={(e) => handleSubmit(e)}>
        {/* General Tab */}
        <div className={activeTab === 'general' ? 'block' : 'hidden'}>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Product Name <span className="text-red-500">*</span>
              </label>
              <input
                type="text"
                name="name"
                value={formData.name}
                onChange={handleInputChange}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="Enter product name"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Slug
              </label>
              <input
                type="text"
                name="slug"
                value={formData.slug}
                onChange={handleInputChange}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="product-url-slug"
              />
              <p className="text-xs text-gray-500 mt-1">Auto-generated from product name</p>
            </div>
          </div>
          
          <div className="mt-6">
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Description <span className="text-red-500">*</span>
            </label>
            <textarea
              name="description"
              value={formData.description}
              onChange={handleInputChange}
              rows={4}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="Enter product description"
            ></textarea>
          </div>
        </div>
        
        <div className="flex justify-end mt-6">
          <button
            type="button"
            onClick={() => router.push('/admin/product')}
            className="px-4 py-2 border border-gray-300 rounded-md text-gray-700 mr-2 hover:bg-gray-50"
          >
            Cancel
          </button>
          <button
            type="submit"
            disabled={isSubmitting}
            className={`px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 ${isSubmitting ? 'opacity-70 cursor-not-allowed' : ''}`}
          >
            {isSubmitting ? 'Saving...' : isNewProduct ? 'Create Product' : 'Update Product'}
          </button>
        </div>
      </form>
    </div>
  );
};

export default ProductForm;
